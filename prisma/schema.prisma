generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model Item {
  id                   String                @id @default(uuid())
  nameId               BigInt                @unique
  marketName           String
  marketHashName       String                @unique
  first_seen           DateTime?
  rarityColorId        Int?
  image                String?
  image_large          String?
  itemTypeId           Int?
  official_update_time DateTime?
  type                 ItemType?             @relation(fields: [itemTypeId], references: [id])
  rarityColor          RarityColor?          @relation(fields: [rarityColorId], references: [id])
  ItemPrice            ItemPrice[]
  OfficialItemPricing  OfficialItemPricing[]
}

model RarityColor {
  id    Int    @id @default(autoincrement())
  color String @unique
  Item  Item[]
}

model ItemType {
  id   Int    @id @default(autoincrement())
  type String @unique
  Item Item[]
}

model ItemPrice {
  id               String          @id @default(uuid())
  itemId           String
  current          Float
  min              Float
  avg              Float
  max              Float
  median           Float?
  safe             Float
  soldLast24h      Float
  soldLast7d       Float
  avgDailyVolume   Float?
  unstable         Boolean
  unstableReasonId Int?
  updateTime       DateTime
  fetchTime        DateTime        @default(now())
  item             Item            @relation(fields: [itemId], references: [id])
  unstableReason   UnstableReason? @relation(fields: [unstableReasonId], references: [id])

  @@index([updateTime])
  @@index([current])
  @@index([itemId])
}

model OfficialItemPricing {
  id     String   @id @default(uuid())
  itemId String
  date   DateTime
  price  Float
  volume Int
  item   Item     @relation(fields: [itemId], references: [id])

  @@unique([itemId, date])
  @@index([itemId])
}

model UnstableReason {
  id             Int         @id @default(autoincrement())
  unstableReason String
  ItemPrice      ItemPrice[]
}
